apiVersion: v1
kind: Service
metadata:
  name: corekube-worker
spec:
  ports:
  - name: worker-s1ap
    port: 5566
    targetPort: 5566
    protocol: UDP
  selector:
    app: corekube-worker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: corekube-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: corekube-worker
  template:
    metadata:
      labels:
        app: corekube-worker
    spec:
      containers:
      - name: corekube-worker
        image: yutotakano/corekube5g-worker-metrics:latest
        ports:
        - containerPort: 5566
          protocol: UDP
          name: worker-s1ap
        command: ["./corekube_udp_worker", "$(THIS_POD_IP)", "$(COREKUBE_DB_SERVICE_HOST)", "6", "1", "$(CORE_METRICS_AGGREGATOR_SERVICE_HOST)"]
        env:
        - name: THIS_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          limits:
            cpu: 300m
          requests:
            cpu: 10m
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: corekube-worker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: corekube-worker
  minReplicas: 2
  maxReplicas: 200
  targetCPUUtilizationPercentage: 80


---

apiVersion: v1
kind: Service
metadata:
  name: core-metrics-aggregator
spec:
  ports:
    - name: receiver
      port: 7799
      targetPort: 7799
      protocol: TCP
    - name: metrics
      port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    app: core-metrics-aggregator

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-metrics-aggregator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: core-metrics-aggregator
  template:
    metadata:
      labels:
        app: core-metrics-aggregator
    spec:
      containers:
      - name: core-metrics-aggregator
        image: yutotakano/core-metrics-aggregator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 7799
          protocol: TCP
        - containerPort: 8000
          protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: corekube-db
spec:
  ports:
  - port: 7788
    targetPort: 7788
    protocol: TCP
  selector:
    app: corekube-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: corekube-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: corekube-db
  template:
    metadata:
      labels:
        app: corekube-db
    spec:
      containers:
      - name: corekube-db
        image: andrewferguson/corekube-db:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 7788
          protocol: TCP
        command: ["./corekubeDB", "$(THIS_POD_IP)"]
        env:
        - name: THIS_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP


---


apiVersion: v1
kind: Service
metadata:
  name: corekube-frontend
spec:
  ports:
  - port: 38412
    targetPort: 38412
    nodePort: 38412
    protocol: SCTP
  selector:
    app: corekube-frontend
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: corekube-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: corekube-frontend
  template:
    metadata:
      labels:
        app: corekube-frontend
    spec:
      serviceAccountName: corekube-core-sa
      containers:
      - name: corekube-frontend
        image: andrewferguson/corekube-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 38412
          protocol: SCTP
        command: ["./corekube_frontend", "$(THIS_POD_IP)", "$(COREKUBE_WORKER_SERVICE_HOST)", "5G"]
        env:
        - name: THIS_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      - name: corekube-core-monitor
        image: yutotakano/corekube-core-monitor:202309011548
        command:
        - python3
        - core-monitor.py
        - '5050'
        - '1'
        ports:
        - containerPort: 5050
        securityContext:
          privileged: true # Required to access the Kubernetes API


---

# Create a Service Account to be used by the Core Monitor when querying the Kubernetes API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: corekube-core-sa

---

# Create a ClusterRole that has the capabilities to get/list the pods/nodes in the API
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: corekube-core-cr
rules:
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list", "watch"]

---

# Bind the above ClusterRole to the Service Account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: corekube-core-crb
subjects:
- kind: ServiceAccount
  name: corekube-core-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: corekube-core-cr
  apiGroup: rbac.authorization.k8s.io

---

# Expose the corekube-core-monitor container's port 5050 (within the
# corekube-frontend pod) as a service that can be accessed from within the
# cluster network (and from Prometheus)
apiVersion: v1
kind: Service
metadata:
  name: corekube-metrics-export-service
  labels:
    app: corekube-metrics-export-service
spec:
  type: ClusterIP
  selector:
    app: corekube-frontend # The selector for the pod containing core-monitor
  ports:
  - port: 5050
    targetPort: 5050
    protocol: TCP
